{"version":3,"sources":["routes/index.ts","api/index.ts","services/auth.ts","services/setFriendList.ts","components/atoms/Button/DropdownButton.tsx","components/atoms/Navbar/NavbarTitle.tsx","components/atoms/Navbar/DropdownItem.tsx","components/atoms/Navbar/DropdownTitle.tsx","components/molecules/Navbar/DropdownList.tsx","components/atoms/Navbar/UserInfoBox.tsx","components/molecules/Navbar/UserInfo.tsx","components/atoms/Button/Submit.tsx","components/molecules/Navbar/SearchUser.tsx","components/atoms/Button/ButtonNoLink.tsx","components/molecules/Navbar/Logout.tsx","img/logo.png","components/organisms/Navbar.tsx","views/Main.tsx","components/atoms/Card/UserDataDisplay.tsx","components/molecules/Chat/ChatFriendModel.tsx","img/profilePicture.png","components/organisms/SideBar.tsx","components/molecules/Chat/MessageModel.tsx","components/organisms/ChatScreen.tsx","components/molecules/Chat/TopInfoBar.tsx","components/atoms/Input/MessageSendinput.tsx","components/atoms/Button/AcceptButton.tsx","components/organisms/SendMessageModule.tsx","views/Chat.tsx","components/atoms/Input/FormInput.tsx","components/molecules/Form/FormField.tsx","components/atoms/Input/CheckBox.tsx","components/molecules/Form/ShowPassword.tsx","components/atoms/Button/AuthSwitchButton.tsx","components/atoms/Box/Card.tsx","components/organisms/SignIn.tsx","components/organisms/SignUp.tsx","views/Auth.tsx","components/atoms/Input/FloatingInput.tsx","components/molecules/DataField.tsx","components/organisms/FullCard.tsx","views/Profile.tsx","components/atoms/Button/DisabledSuccessBtt.tsx","components/atoms/Button/DisabledInfoBtt.tsx","components/molecules/SearchFriendModel.tsx","views/SearchUser.tsx","components/atoms/Button/DangerButton.tsx","components/atoms/Button/RejectButton.tsx","components/molecules/FriendListModel.tsx","components/organisms/FriendListManagement.tsx","views/Friends.tsx","views/Root.tsx","redux/reducers/index.ts","redux/reducers/searchUsersReducer.ts","redux/reducers/setUserDataReducer.ts","redux/reducers/setFulfilledFriendListReducer.ts","redux/reducers/isShowPasswordReducer.ts","redux/reducers/setCurrentChatReducer.ts","redux/reducers/setMessageListReducer.ts","redux/store.ts","reportWebVitals.ts","index.tsx"],"names":["routes","API","axios","create","baseURL","process","withCredentials","headers","Accept","generateFriendList","get","auth","a","res","userData","id","data","_id","email","name","lastName","friends","isUserLoggedIn","console","log","setFriendList","status","friendList","DropdownButton","className","type","NavbarTitle","props","to","src","logo","alt","style","height","value","DropdownItem","path","DropdownTitle","href","role","DropdownList","UserInfoBox","opacity","color","marginTop","UserInfo","useState","isHover","setIsHover","onMouseEnter","onMouseLeave","Submit","SearchUser","dispatch","useDispatch","history","useHistory","searchUser","e","preventDefault","formData","form","currentTarget","searchPhraze","toString","post","then","result","searchResult","payload","push","catch","alert","err","onSubmit","placeholder","required","ButtonNoLink","Logout","useSelector","state","logoutAction","onClick","Navbar","Main","UserDataDisplay","firstname","lastname","getMessageList","friendId","response","messages","sortedMessages","map","message","messageData","JSON","parse","senderId","date","Date","sort","b","getTime","convertedMessages","convertedMessage","ChatFriendModel","width","cursor","setChatData","backgroundColor","imgHeight","img","SideBar","friend","friendRequestStatus","profile","MessageModel","isUserSender","float","fontColor","fontSize","messageValue","ChatScreen","messageList","jsxElement","i","length","generateMessage","TopInfoBar","setCurrentChat","currentChat","MessageSendInput","inputType","AcceptButton","SendMessageModule","endpoint","io","emit","sendMessage","Chat","useEffect","on","FormInput","FormField","htmlFor","CheckBox","ShowPassword","isShowPassword","showPassword","AuthSwitchButton","setIsSignIn","isSignIn","Card","SignIn","signingIn","password","error","left","top","transform","SignUp","signingUp","username","passwordCheck","stringify","confirmPassword","Auth","FloatingInput","isDisabled","disabled","DataField","label","FullCard","setIsDisabled","isUpdateBtn","setIsUpdateBtn","display","setDisplay","updateUserDataAction","updatedUser","headerValue","footerValue","Profile","position","DisabledSuccessBtt","DisabledInfoBtt","SearchFriendModel","searchResults","sendFriendRequest","modifiedSearchresults","user","decideWhichButtonToRender","isFriend","jsxToReturn","index","window","scrollTo","generatingSearchResults","DangerButton","RejectButton","FriendListModel","manageFriendRequest","finalStatus","removeFriend","FriendListManagement","Friends","Root","exact","component","reducers","combineReducers","action","store","configureStore","reducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9c0a70d.chunk.js","sourcesContent":["export const routes = {\n    home: '/',\n    chat: '/chat',\n    auth: '/auth',\n    profile: '/profile',\n    searchUser: '/searchUser',\n    friends: '/friends', //page with friend reqquests and your current friend table\n};\n","import axios from 'axios';\n\nconst url =\n    process.env.NODE_ENV === 'development'\n        ? process.env.REACT_APP_BACKEND_URL_LOCAL\n        : process.env.REACT_APP_BACKEND_URL;\n\n// const url = process.env.REACT_APP_BACKEND_URL_LOCAL;\n\nconst API = axios.create({\n    baseURL: url,\n    withCredentials: true,\n    headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n    },\n});\n\nexport const signIn = (formData: { email: string; password: string }) =>\n    API.post('/user/signin', formData);\n\nexport const signUp = (formData: {\n    email: string;\n    name: string;\n    lastName: string;\n    password: string;\n}) => API.post('/user/signup', formData);\n\nexport const getUserData = () => API.get('/user/getUser');\n\nexport const updateUserData = (formData: {\n    name: string;\n    email: string;\n    lastname: string;\n}) => API.post('/user/updateUser', formData);\n\nexport const searchUsers = (formData: { searchPhraze: string }) =>\n    API.post('/user/searchUser', formData);\n\nexport const generateFriendList = () => API.get('/user/generateFriendList');\n\nexport const logout = () => API.get('/user/logout');\n\nexport const sendFriendRequestAPI = (formData: { id: string }) =>\n    API.post('/user/sendFriendRequest', formData);\n\nexport const manageFriendRequestAPI = (formData: {\n    friendId: string;\n    finalStatus: boolean;\n}) => API.post('/user/manageFriendRequest', formData);\n\nexport const removeFriendAPI = (formData: { friendId: string }) =>\n    API.post('/user/removeFriend', formData);\n\nexport const getMessageListAPI = (formData: { friendId: string }) =>\n    API.post('/user/getMessageList', formData);\n","import { getUserData } from '../api/index';\nimport { IUserData } from '../types/types';\n\nexport const auth = async () => {\n    try {\n        const res = await getUserData();\n\n        const userData: IUserData = {\n            id: res.data._id,\n            email: res.data.email,\n            name: res.data.name,\n            lastName: res.data.lastName,\n            friends: res.data.friends,\n            isUserLoggedIn: true,\n        };\n\n        return userData;\n    } catch (err) {\n        console.log(err);\n    }\n};\n","import { generateFriendList } from '../api';\nimport { IFullFriendData } from '../types/types';\n\nexport const setFriendList = async () => {\n    const res = await generateFriendList();\n\n    if (res.status === 200) {\n        const friendList: IFullFriendData[] = res.data.friendList;\n\n        return friendList;\n    }\n};\n","import React from 'react';\n\nexport const DropdownButton = () => {\n    return (\n        <button\n            className='navbar-toggler'\n            type='button'\n            data-bs-toggle='collapse'\n            data-bs-target='#navbarNavDarkDropdown'\n            aria-controls='navbarNavDarkDropdown'\n            aria-expanded='false'\n            aria-label='Toggle navigation'>\n            <span className='navbar-toggler-icon'></span>\n        </button>\n    );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const NavbarTitle = (props: { value: string; logo: string }) => {\n    return (\n        <>\n            <Link to='/Chat' className='navbar-brand'>\n                <div className='d-flex flex-row mt-3'>\n                    <div className='me-1'>\n                        <img\n                            src={props.logo}\n                            alt='logo'\n                            style={{ height: '4vh' }}\n                        />\n                    </div>\n                    <p>{props.value}</p>\n                </div>\n            </Link>\n        </>\n    );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const DropdownItem = (props: { value: string; path: string }) => {\n    return (\n        <li>\n            <Link to={props.path} className={'dropdown-item'}>\n                {props.value}\n            </Link>\n        </li>\n    );\n};\n","import React from 'react';\n\nexport const DropdownTitle = (props: { value: string }) => {\n    return (\n        <a\n            className='nav-link dropdown-toggle'\n            href=''\n            id='navbarDarkDropdownMenuLink'\n            role='button'\n            data-bs-toggle='dropdown'\n            aria-expanded='false'>\n            {props.value}\n        </a>\n    );\n};\n","import React from 'react';\nimport { DropdownItem as Item } from '../../atoms/Navbar/DropdownItem';\nimport { DropdownTitle } from '../../atoms/Navbar/DropdownTitle';\n\nexport const DropdownList = () => {\n    return (\n        <div className='collapse navbar-collapse' id='navbarNavDarkDropdown'>\n            <ul className='navbar-nav'>\n                <li className='nav-item dropdown'>\n                    <DropdownTitle value={'Navigation'} />\n                    <ul\n                        className='dropdown-menu dropdown-menu-dark'\n                        aria-labelledby='navbarDarkDropdownMenuLink'>\n                        <Item value={'Main'} path={'/'} />\n                        <Item value={'Login'} path={'/Auth'} />\n                        <Item value={'User Info'} path={'/Profile'} />\n                        <Item value={'Friends'} path={'/friends'} />\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const UserInfoBox = (props: { email: string; opacity: string }) => {\n    return (\n        <div\n            className={`nav-item vh-6 vw-10 text-decoration-none`}\n            style={{\n                opacity: props.opacity,\n                color: 'white',\n                marginTop: '0.5vh',\n            }}>\n            <h5>{props.email}</h5>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { UserInfoBox } from '../../atoms/Navbar/UserInfoBox';\nimport { Link } from 'react-router-dom';\n\nexport const UserInfo = (props: { email: string }) => {\n    const [isHover, setIsHover] = useState(false);\n\n    return (\n        <>\n            {isHover ? (\n                <Link to={'/profile'} className={'text-decoration-none'}>\n                    <div\n                        onMouseEnter={() => setIsHover(true)}\n                        onMouseLeave={() => setIsHover(false)}>\n                        <UserInfoBox email={props.email} opacity={'1.0'} />\n                    </div>\n                </Link>\n            ) : (\n                <Link to={'/profile'} className={'text-decoration-none'}>\n                    <div\n                        onMouseEnter={() => setIsHover(true)}\n                        onMouseLeave={() => setIsHover(false)}>\n                        <UserInfoBox email={props.email} opacity={'0.6'} />\n                    </div>\n                </Link>\n            )}\n        </>\n    );\n};\n","import React from 'react';\n\nexport const Submit = (props: { value: string }) => {\n    return (\n        <button type='submit' className='btn btn-primary m-3 btn-lg vh-5'>\n            {props.value}\n        </button>\n    );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Submit } from '../../atoms/Button/Submit';\nimport { searchUsers } from '../../../api';\nimport { useHistory } from 'react-router-dom';\nimport { routes } from '../../../routes/index';\n\ninterface ISearchResult {\n    email: string;\n    name: string;\n    lastName: string;\n}\n\nexport const SearchUser = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const searchUser = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const form: HTMLFormElement = e.currentTarget;\n        try {\n            if (\n                (form !== null && form.searchPhraze !== null) ||\n                form.searchPhraze !== ''\n            ) {\n                const searchPhraze = form.searchPhraze.value.toString();\n\n                searchUsers({ searchPhraze: searchPhraze })\n                    .then(res => {\n                        if (res.status === 200) {\n                            console.log(res.data.result);\n                            const searchResult: ISearchResult = res.data.result;\n\n                            dispatch({\n                                type: 'SEARCH_USERS',\n                                payload: searchResult,\n                            });\n\n                            history.push(routes.searchUser);\n                        }\n                    })\n                    .catch(() => {\n                        dispatch({ type: 'CLEAR_SEARCH_USERS' });\n                        alert('No users found');\n                    });\n            } else {\n                alert('Fill the form');\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <div style={{ color: 'blue' }} className={''}>\n            <div className={'d-flex flex-row vh-12'}>\n                <form onSubmit={e => searchUser(e)}>\n                    <div className={'d-flex flex-row vh-12'}>\n                        <div className='mt-1'>\n                            <input\n                                name='searchPhraze'\n                                type='text'\n                                placeholder={'search user'}\n                                className={'rounded bg-secondary text-white'}\n                                style={{ height: '5vh', marginTop: '1.5vh' }}\n                                required\n                            />\n                        </div>\n                        <div>\n                            <Submit value={'search'} />\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const ButtonNoLink = (props: {\n    type: 'submit' | 'button';\n    value: string;\n}) => {\n    return (\n        <button\n            type={props.type}\n            className='btn btn-outline-primary m-2 btn-lg'\n            style={{ height: '6vh' }}>\n            {props.value}\n        </button>\n    );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/store';\nimport { useHistory } from 'react-router-dom';\nimport { logout } from '../../../api';\nimport { ButtonNoLink } from '../../atoms/Button/ButtonNoLink';\nimport { IUserData } from '../../../types/types';\n\nexport const Logout = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const userData: IUserData = useSelector(\n        (state: RootState) => state.userData,\n    );\n\n    const logoutAction = () => {\n        logout().then(() => {\n            dispatch({ type: 'LOGOUT' });\n            dispatch({ type: 'CLEAR_FULFILLED_FRIENDLIST' });\n            dispatch({ type: 'CLEAR_CURRENT_CHAT' });\n            dispatch({ type: 'CLEAR_MESSAGE_LIST' });\n            history.push('/auth');\n        });\n    };\n\n    return (\n        <>\n            {userData.isUserLoggedIn ? (\n                <div\n                    onClick={() => {\n                        logoutAction();\n                    }}>\n                    <ButtonNoLink value='Logout' type='button' />\n                </div>\n            ) : (\n                <div\n                    className='d-none'\n                    onClick={() => {\n                        logoutAction();\n                    }}>\n                    <ButtonNoLink value='Logout' type='button' />\n                </div>\n            )}\n        </>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/logo.85a46bba.png\";","import React from 'react';\nimport { DropdownButton } from '../atoms/Button/DropdownButton';\nimport { NavbarTitle as Title } from '../atoms/Navbar/NavbarTitle';\nimport { DropdownList } from '../molecules/Navbar/DropdownList';\nimport { UserInfo } from '../molecules/Navbar/UserInfo';\nimport { SearchUser } from '../molecules/Navbar/SearchUser';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { IUserData } from '../../types/types';\nimport { Logout } from '../molecules/Navbar/Logout';\nimport logo from '../../img/logo.png';\n\nexport const Navbar = () => {\n    const userData: IUserData = useSelector(\n        (state: RootState) => state.userData,\n    );\n\n    return (\n        <nav\n            className='navbar sticky-top navbar-expand-lg navbar-dark bg-dark mb-0'\n            style={{ height: '10vh' }}>\n            <div className='container-fluid'>\n                <Title value={'Chat'} logo={logo} />\n                <DropdownButton />\n                <DropdownList />\n                <SearchUser />\n                {userData.isUserLoggedIn ? (\n                    <>\n                        <UserInfo email={userData.email} />\n                        <Logout />\n                    </>\n                ) : (\n                    <>\n                        <UserInfo email={'john@doe.com'} />\n                        <Logout />r\n                    </>\n                )}\n            </div>\n        </nav>\n    );\n};\n","import React from 'react';\n\nexport const Main = () => {\n    return (\n        <div>\n            <div>Main</div>\n            {/* Carousel bootstrap with chat description*/}\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const UserDataDisplay = (props: {\n    firstname: string;\n    lastname: string;\n    email: string;\n}) => {\n    return (\n        <div className='d-flex flex-column justify-content-between'>\n            <h5>\n                {props.firstname} {props.lastname}\n            </h5>\n            <h6 style={{ color: 'gray' }}>{props.email}</h6>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getMessageListAPI } from '../../../api';\nimport { UserDataDisplay } from '../../atoms/Card/UserDataDisplay';\n\ninterface IMessage {\n    message: string;\n    senderId: string;\n    date: Date;\n}\n\nconst getMessageList = async (id: string) => {\n    const response = await getMessageListAPI({ friendId: id });\n\n    const messages: string[] = response.data.messages;\n\n    //sort messages by date, latest first\n    const sortedMessages: IMessage[] = messages\n        .map((message: string) => {\n            const messageData = JSON.parse(message);\n\n            return {\n                message: messageData.message,\n                senderId: messageData.senderId,\n                date: new Date(messageData.date),\n            };\n        })\n        .sort((a: IMessage, b: IMessage) => {\n            return b.date.getTime() - a.date.getTime();\n        });\n    console.log(sortedMessages);\n    const convertedMessages = messages.map(message => {\n        // console.log(message);\n        const convertedMessage: IMessage = JSON.parse(message);\n        return {\n            value: convertedMessage.message,\n            senderId: convertedMessage.senderId,\n            date: convertedMessage.date,\n        };\n    });\n    console.log(convertedMessages);\n\n    return convertedMessages;\n};\n\nexport const ChatFriendModel = (props: {\n    firstname: string;\n    lastname: string;\n    email: string;\n    img: string;\n    imgHeight: string;\n    height: string;\n    width: string;\n    id: string;\n}) => {\n    const [isHover, setIsHover] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const setChatData = () => {\n        const data = {\n            _id: props.id,\n            name: props.firstname,\n            lastname: props.lastname,\n            email: props.email,\n        };\n\n        dispatch({\n            type: 'SET_CURRENT_CHAT',\n            payload: data,\n        });\n\n        getMessageList(props.id).then(messages => {\n            console.log(messages);\n            dispatch({\n                type: 'SET_MESSAGE_LIST',\n                payload: messages,\n            });\n        });\n    };\n\n    return (\n        <div\n            className='d-flex justify-content-evenly'\n            style={{ width: `${props.width}vw`, cursor: 'pointer' }}\n            onClick={() => setChatData()}>\n            {isHover ? (\n                <div\n                    className='d-flex flex-row justify-content-evenly align-items-center'\n                    style={{\n                        width: `${props.width}vw`,\n                        height: `${props.height}vh`,\n                        backgroundColor: '#e6e6e6',\n                    }}\n                    onMouseEnter={() => {\n                        setIsHover(true);\n                    }}\n                    onMouseLeave={() => setIsHover(false)}>\n                    <img\n                        style={{ height: `${props.imgHeight}vh` }}\n                        className='rounded-circle'\n                        src={props.img}\n                        alt='profile picture'\n                    />\n                    <div className='d-flex flex-column justify-content-between w-50'>\n                        <UserDataDisplay\n                            firstname={props.firstname}\n                            lastname={props.lastname}\n                            email={props.email}\n                        />\n                    </div>\n                </div>\n            ) : (\n                <div\n                    className='d-flex flex-row justify-content-evenly align-items-center'\n                    style={{\n                        width: `${props.width}vw`,\n                        height: `${props.height}vh`,\n                    }}\n                    onMouseEnter={() => setIsHover(true)}\n                    onMouseLeave={() => setIsHover(false)}>\n                    <img\n                        style={{ height: `${props.imgHeight}vh` }}\n                        className='rounded-circle'\n                        src={props.img}\n                        alt='profile picture'\n                    />\n                    <div className='d-flex flex-column justify-content-between w-50'>\n                        <UserDataDisplay\n                            firstname={props.firstname}\n                            lastname={props.lastname}\n                            email={props.email}\n                        />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/profilePicture.0334f4b4.png\";","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { IFullFriendData } from '../../types/types';\nimport { ChatFriendModel } from '../molecules/Chat/ChatFriendModel';\nimport profile from '../../img/profilePicture.png';\n\nexport const SideBar = () => {\n    const friendList: IFullFriendData[] = useSelector(\n        (state: RootState) => state.friendList,\n    );\n\n    return (\n        <div\n            className={`border-1 border-end float-start overflow-auto bg-light`}\n            style={{ width: '30vw', height: '90vh' }}>\n            {friendList.map(friend => {\n                if (friend.friendRequestStatus && friend._id)\n                    return (\n                        <div key={friend._id}>\n                            <ChatFriendModel\n                                firstname={friend.name}\n                                lastname={friend.lastName}\n                                email={friend.email}\n                                img={profile}\n                                imgHeight={'5'}\n                                height={'10'}\n                                width={'30'}\n                                id={friend._id}\n                            />\n                        </div>\n                    );\n            })}\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const MessageModel = (props: {\n    messageValue: string;\n    isUserSender: boolean;\n}) => {\n    const decideColor = () => {\n        if (props.isUserSender) {\n            return '#1a75ff';\n        } else {\n            return '#f2f2f2';\n        }\n    };\n\n    const setFloat = () => {\n        if (props.isUserSender) {\n            return 'float-end';\n        } else {\n            return 'float-start';\n        }\n    };\n\n    const setFontColor = () => {\n        if (props.isUserSender) {\n            return 'white';\n        } else {\n            return 'black';\n        }\n    };\n\n    const color = decideColor();\n    const float = setFloat();\n    const fontColor = setFontColor();\n\n    return (\n        <div>\n            <div className={`${float}`} style={{ width: '60%' }}>\n                <div className={`${float}`}>\n                    <p\n                        className='rounded-pill p-2 m-2 ps-3 pe-3'\n                        style={{\n                            backgroundColor: color,\n                            fontSize: '2.2vh',\n                            color: fontColor,\n                        }}>\n                        {props.messageValue}\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { MessageModel } from '../molecules/Chat/MessageModel';\nimport { IMessage, IUserData, IChat } from '../../types/types';\n\nexport const ChatScreen = () => {\n    const messageList: IMessage[] = useSelector(\n        (state: RootState) => state.messageList,\n    );\n    // console.log(messageList)\n    // //sort message list by date latest first\n    // const sortedMessageList: IMessage[] = messageList\n    //     .sort((a: IMessage, b: IMessage) => {\n    //         return b.date.getTime() - a.date.getTime();\n    //     }\n    //     )\n    //     .map(message => {\n    //         const convertedMessage: IMessage = JSON.parse(message);\n    //         return {\n    //             value: convertedMessage.message,\n    //             senderId: convertedMessage.senderId,\n    //             date: convertedMessage.date,\n    //         };\n    //     }\n    //     );\n    // console.log(sortedMessageList);\n    const userData: IUserData = useSelector(\n        (state: RootState) => state.userData,\n    );\n\n    const generateMessage = () => {\n        const jsxElement: JSX.Element[] = [];\n\n        //sort messages by timestamp (descending)\n    //     const sortedMessages: IMessage[] = messageList\n    //     .map((message: string) => {\n    //         const messageData = JSON.parse(message);\n\n    //         return {\n    //             value: messageData.message,\n    //             senderId: messageData.senderId,\n    //             date: new Date(messageData.date),\n    //         };\n    //     })\n    //     .sort((a: IMessage, b: IMessage) => {\n    //         return b.date.getTime() - a.date.getTime();\n    //     });\n    // console.log(sortedMessages);\n\n        for (let i = messageList.length - 1; i >= 0; i--) {\n            const message: IMessage = messageList[i];\n\n            jsxElement.push(\n                <MessageModel\n                    key={i}\n                    messageValue={message.value}\n                    isUserSender={message.senderId === userData.id}\n                />,\n            );\n        }\n\n        return jsxElement;\n    };\n\n    return (\n        <div\n            className='border-bottom d-flex flex-column overflow-auto'\n            style={{ width: '70vw', height: '79vh' }}>\n\n            {generateMessage()}\n        </div>\n    );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/store';\nimport { IChat } from '../../../types/types';\n\nexport const TopInfoBar = () => {\n    const setCurrentChat: IChat = useSelector(\n        (state: RootState) => state.currentChat,\n    );\n\n    return (\n        <div\n            className='d-flex justify-content-center align-center text-center float-end border-bottom'\n            style={{ height: '4vh', width: '70vw' }}>\n            <h4>\n                {setCurrentChat.name} {setCurrentChat.lastname}\n            </h4>\n        </div>\n    );\n};\n","export const MessageSendInput = (props: {\n    inputType: string;\n    name: string;\n    placeholder: string;\n}) => {\n    return (\n        <input\n            type={props.inputType}\n            className='form-control'\n            name={props.name}\n            placeholder={props.placeholder}\n        />\n    );\n};\n","import React from 'react';\n\nexport const AcceptButton = (props: {\n    type: 'button' | 'submit';\n    value: string;\n}) => {\n    return (\n        <button type={props.type} className='btn btn-outline-success'>\n            <i>{props.value}</i>\n        </button>\n    );\n};\n","import React from 'react';\nimport { io } from 'socket.io-client';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { MessageSendInput } from '../atoms/Input/MessageSendinput';\nimport { AcceptButton } from '../atoms/Button/AcceptButton';\nimport { IChat, IUserData } from '../../types/types';\n\nexport const SendMessageModule = () => {\n    const dispatch = useDispatch();\n    const endpoint = process.env.REACT_APP_BACKEND_URL_LOCAL;\n\n    const currentChat: IChat = useSelector(\n        (state: RootState) => state.currentChat,\n    );\n    const userData: IUserData = useSelector(\n        (state: RootState) => state.userData,\n    );\n\n    const sendMessage = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        const form: HTMLFormElement = e.currentTarget;\n        if (form !== null && form.message !== null) {\n            const message = form.message.value;\n            const senderId = userData.id;\n\n            if (endpoint) {\n                const socket = io(endpoint);\n\n                socket.emit('send message', message, senderId, currentChat._id);\n            }\n            form.message.value = '';\n        }\n    };\n\n    return (\n        <form onSubmit={e => sendMessage(e)} style={{ height: '7vh' }}>\n            <div className='d-flex flex-row justify-content-center'>\n                <div\n                    className='d-flex flex-column justify-content-center pe-2'\n                    style={{ height: '7vh', width: '61vw' }}>\n                    <MessageSendInput\n                        inputType={'text'}\n                        name={'message'}\n                        placeholder={'Send Message'}\n                    />\n                </div>\n                <div\n                    className='d-flex flex-column justify-content-center ps-2'\n                    style={{ height: '7vh' }}>\n                    <AcceptButton type='submit' value='send' />\n                </div>\n            </div>\n        </form>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../redux/store';\nimport { SideBar } from '../components/organisms/SideBar';\nimport { ChatScreen } from '../components/organisms/ChatScreen';\nimport { TopInfoBar } from '../components/molecules/Chat/TopInfoBar';\nimport { SendMessageModule } from '../components/organisms/SendMessageModule';\nimport { IChat, IUserData } from '../types/types';\n\nexport const Chat = () => {\n    const endpoint = process.env.REACT_APP_BACKEND_URL_LOCAL;\n    const dispatch = useDispatch();\n\n    const currentChat: IChat = useSelector(\n        (state: RootState) => state.currentChat,\n    );\n\n    const userData: IUserData = useSelector(\n        (state: RootState) => state.userData,\n    );\n\n    //initialize & handle socket connection\n    useEffect(() => {\n        if (endpoint) {\n            const socket = io(endpoint);\n\n            // console.log(`${userData.id} -> ${currentChat._id}`);\n            socket.on(\n                `${userData.id}:${currentChat._id}`,\n                (message: { message: string; senderId: string }) => {\n\n\n                    dispatch({\n                        type: 'ADD_MESSAGE',\n                        payload: {\n                            value: message.message,\n                            senderId: message.senderId,\n                        },\n                    });\n                },\n            );\n        }\n    }, [userData.id, currentChat._id]);\n\n    return (\n        <div>\n            <SideBar />\n            <TopInfoBar />\n            <ChatScreen />\n            <SendMessageModule />\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const FormInput = (props: { inputType: string; name: string }) => {\n    return (\n        <input\n            type={props.inputType}\n            className='form-control'\n            name={props.name}\n            placeholder='name@example.com'\n        />\n    );\n};\n","import React from 'react';\nimport { FormInput } from '../../atoms/Input/FormInput';\n\nexport const FormField = (props: {\n    value: string;\n    inputType: string;\n    name: string;\n}) => {\n    return (\n        <div className='form-floating mb-3 w-50'>\n            <FormInput name={props.name} inputType={props.inputType} />\n            <label htmlFor={props.value}>{props.value}</label>\n        </div>\n    );\n};\n","import React from 'react';\n\n\nexport const CheckBox = () => {\n    return (\n        <input\n            onClick={() => {}}\n            type='checkbox'\n            className='form-check-input'\n            id='form-checkbox'\n        />\n    );\n};\n","import React from 'react';\nimport { CheckBox } from '../../atoms/Input/CheckBox';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../../redux/store';\n\nexport const ShowPassword = (props: { value: string }) => {\n    const isShowPassword: boolean = useSelector(\n        (state: RootState) => state.showPassword,\n    );\n    const dispatch = useDispatch();\n    return (\n        <div className='form-check'>\n            <div\n                onClick={() => {\n                    const isShowPasswordToggle: boolean = !isShowPassword;\n                    dispatch({\n                        type: 'SET_IS_SHOW_PASSWORD',\n                        payload: isShowPasswordToggle,\n                    });\n                }}>\n                <CheckBox />\n            </div>\n            <label className='form-check-label' htmlFor='showPassword'>\n                {props.value}\n            </label>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nexport const AuthSwitchButton = (props: {\n    value: string;\n    setIsSignIn: React.Dispatch<React.SetStateAction<boolean>>;\n    isSignIn: boolean;\n}) => {\n    const dispatch = useDispatch();\n\n    return (\n        <button\n            type='button'\n            className='btn btn-link m-3'\n            onClick={() => {\n                props.setIsSignIn(!props.isSignIn);\n                dispatch({ type: 'SET_IS_SHOW_PASSWORD', payload: false });\n            }}>\n            {props.value}\n        </button>\n    );\n};\n","import React from 'react';\n\nexport const Card = (props: { value: string }) => {\n    return (\n        <div className={'card-title'} style={{ fontSize: 'xxx-large' }}>\n            {props.value}\n        </div>\n    );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { signIn } from '../../api';\nimport { setFriendList } from '../../services/setFriendList';\nimport { FormField } from '../molecules/Form/FormField';\nimport { Submit } from '../atoms/Button/Submit';\nimport { ShowPassword } from '../molecules/Form/ShowPassword';\nimport { AuthSwitchButton } from '../atoms/Button/AuthSwitchButton';\nimport { Card } from '../atoms/Box/Card';\nimport { useHistory } from 'react-router-dom';\nimport { IUserData } from '../../types/types';\n\nexport const SignIn = ({\n    value,\n    setIsSignIn,\n}: {\n    value: string;\n    setIsSignIn: React.Dispatch<React.SetStateAction<boolean>>;\n}) => {\n    const showPassword: boolean = useSelector(\n        (state: RootState) => state.showPassword,\n    );\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const signingIn = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        try {\n            const form: HTMLFormElement = e.currentTarget;\n            if (\n                form !== null &&\n                form.email !== null &&\n                form.password !== null\n            ) {\n                signIn({\n                    email: form.email.value.toString(),\n                    password: form.password.value.toString(),\n                })\n                    .then(res => {\n                        if (res.status === 200) {\n                            const userData: IUserData = {\n                                id: res.data.result._id,\n                                email: res.data.result.email,\n                                name: res.data.result.name,\n                                lastName: res.data.result.lastName,\n                                friends: res.data.result.friends,\n                                isUserLoggedIn: true,\n                            };\n\n                            dispatch({\n                                type: 'SET_USER_DATA',\n                                payload: userData,\n                            });\n                            dispatch({\n                                type: 'SET_IS_LOGGED_IN',\n                                payload: true,\n                            });\n\n                            setFriendList().then(friendList => {\n                                dispatch({\n                                    type: 'SET_FULFILLED_FRIENDLIST',\n                                    payload: friendList,\n                                });\n                            });\n\n                            history.push('/chat');\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    });\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return (\n        <form\n            id='signInForm'\n            onSubmit={e => {\n                signingIn(e);\n            }}>\n            <div\n                className={`position-absolute w-75 d-flex align-items-center \n                justify-content-center card border-2 bg-light `}\n                style={{\n                    fontSize: 'large',\n                    left: '50%',\n                    top: '55%',\n                    transform: 'translate(-50%, -50%)',\n                }}>\n                <Card value={'Login'} />\n\n                <FormField\n                    inputType={'email'}\n                    value={'Email address'}\n                    name={'email'}\n                />\n                {showPassword ? (\n                    <FormField\n                        value={'Password'}\n                        inputType={'text'}\n                        name={'password'}\n                    />\n                ) : (\n                    <FormField\n                        value={'Password'}\n                        inputType={'password'}\n                        name={'password'}\n                    />\n                )}\n\n                <ShowPassword value={'Show password'} />\n                <Submit value={'Submit'} />\n                <p>Don't have an account yet? Click the button down below</p>\n                <AuthSwitchButton\n                    value={value}\n                    setIsSignIn={setIsSignIn}\n                    isSignIn={true}\n                />\n            </div>\n        </form>\n    );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { useHistory } from 'react-router-dom';\nimport { signUp } from '../../api';\nimport { FormField } from '../molecules/Form/FormField';\nimport { Submit } from '../atoms/Button/Submit';\nimport { ShowPassword } from '../molecules/Form/ShowPassword';\nimport { Card } from '../atoms/Box/Card';\nimport { AuthSwitchButton } from '../atoms/Button/AuthSwitchButton';\nimport { IUserData } from '../../types/types';\n\nexport const SignUp = ({\n    value,\n    setIsSignIn,\n}: {\n    value: string;\n    setIsSignIn: React.Dispatch<React.SetStateAction<boolean>>;\n}) => {\n    const showPassword: boolean = useSelector(\n        (state: RootState) => state.showPassword,\n    );\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const signingUp = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        try {\n            const form: HTMLFormElement = e.currentTarget;\n            if (\n                form !== null &&\n                form.username !== null &&\n                form.lastName !== null &&\n                form.email !== null &&\n                form.password !== null &&\n                passwordCheck(form)\n            ) {\n                signUp({\n                    email: form.email.value.toString(),\n                    name: form.username.value.toString(),\n                    lastName: form.lastName.value.toString(),\n                    password: form.password.value.toString(),\n                })\n                    .then(res => {\n                        if (res.status === 200) {\n                            const userData: IUserData = {\n                                id: res.data.result._id,\n                                email: res.data.result.email,\n                                name: res.data.result.name,\n                                lastName: res.data.result.lastName,\n                                friends: res.data.result.friends,\n                                isUserLoggedIn: true,\n                            };\n                            console.log(\n                                `userdata: ${JSON.stringify(userData)}`,\n                            );\n\n                            dispatch({\n                                type: 'SET_USER_DATA',\n                                payload: userData,\n                            });\n\n                            dispatch({\n                                type: 'SET_IS_LOGGED_IN',\n                                payload: true,\n                            });\n\n                            history.push('/chat');\n                        } else {\n                            console.log(res);\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    });\n            } else {\n                alert('Fill all the fields correctly');\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const passwordCheck = (form: HTMLFormElement) => {\n        const password = form.password.value;\n        const repeatedPassword = form.confirmPassword.value;\n\n        if (password == repeatedPassword) return true;\n\n        return false;\n    };\n\n    return (\n        <form\n            onSubmit={e => {\n                signingUp(e);\n            }}>\n            <div\n                className={`position-absolute w-75 d-flex align-items-center \n                justify-content-center card border-2 bg-light `}\n                style={{\n                    fontSize: 'large',\n                    left: '50%',\n                    top: '55%',\n                    transform: 'translate(-50%, -50%)',\n                }}>\n                <Card value={'Register'} />\n                <FormField\n                    inputType={'email'}\n                    value={'Email address'}\n                    name={'email'}\n                />\n                <FormField\n                    inputType={'text'}\n                    value={'Name'}\n                    name={'username'}\n                />\n                <FormField\n                    inputType={'text'}\n                    value={'Last Name'}\n                    name={'lastName'}\n                />\n\n                {showPassword ? (\n                    <>\n                        <FormField\n                            value={'Password'}\n                            inputType={'text'}\n                            name={'password'}\n                        />\n                        <FormField\n                            value={'Repeat Password'}\n                            inputType={'text'}\n                            name={'confirmPassword'}\n                        />\n                    </>\n                ) : (\n                    <>\n                        <FormField\n                            value={'Password'}\n                            inputType={'password'}\n                            name={'password'}\n                        />\n                        <FormField\n                            value={'Repeat Password'}\n                            inputType={'password'}\n                            name={'confirmPassword'}\n                        />\n                    </>\n                )}\n\n                <ShowPassword value={'Show password'} />\n                <Submit value={'Submit'} />\n                <p>Already have an account? Click the button down below</p>\n                <AuthSwitchButton\n                    value={value}\n                    setIsSignIn={setIsSignIn}\n                    isSignIn={false}\n                />\n            </div>\n        </form>\n    );\n};\n","import React, { useState } from 'react';\nimport { SignIn } from '../components/organisms/SignIn';\nimport { SignUp } from '../components/organisms/SignUp';\n\nexport const Auth = () => {\n    const [isSignIn, setIsSignIn] = useState(true);\n\n    return (\n        <div>\n            {isSignIn ? (\n                <SignIn value={'Register'} setIsSignIn={setIsSignIn} />\n            ) : (\n                <SignUp value={'Login'} setIsSignIn={setIsSignIn} />\n            )}\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const FloatingInput = (props: {\n    value: string;\n    placeholder: string;\n    isDisabled: boolean;\n    name: string;\n}) => {\n    return (\n        <div className='form-floating mb-3'>\n            {props.isDisabled ? (\n                <input\n                    type='text'\n                    name={props.name}\n                    className='form-control'\n                    placeholder={props.placeholder}\n                    disabled\n                />\n            ) : (\n                <input\n                    type='text'\n                    name={props.name}\n                    className='form-control'\n                    placeholder={props.placeholder}\n                />\n            )}\n            <label htmlFor='floatingInput'>{props.value}</label>\n        </div>\n    );\n};\n","import React from 'react';\nimport { FloatingInput } from '../atoms/Input/FloatingInput';\n\nexport const DataField = (props: {\n    value: string;\n    label: string;\n    isDisabled: boolean;\n    name: string;\n}) => {\n    return (\n        <div className='d-flex flex-row align-items-center justify-content-center'>\n            <p\n                className='mb-3 me-2'\n                style={{ width: '7vw', fontSize: '2.3vh' }}>\n                {props.label}:\n            </p>\n            <FloatingInput\n                name={props.name}\n                value={props.value}\n                placeholder={props.value}\n                isDisabled={props.isDisabled}\n            />\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { updateUserData } from '../../api';\nimport { DataField } from '../molecules/DataField';\nimport { FriendListModel } from '../molecules/FriendListModel';\nimport { IUserData } from '../../types/types';\nimport { UserFriendListDisplay } from './UserFriendListDisplay';\nimport profile from '../../img/profilePicture.png';\n\nexport const FullCard = (props: {\n    headerValue: string;\n    footerValue: string;\n    firstname: string;\n    lastname: string;\n    email: string;\n    img: string;\n    imgHeight: string;\n}) => {\n    const [isDisabled, setIsDisabled] = useState(true);\n    const [isUpdateBtn, setIsUpdateBtn] = useState(false);\n    const [display, setDisplay] = useState(true);\n\n    const dispatch = useDispatch();\n    const userData: IUserData = useSelector(\n        (state: RootState) => state.userData,\n    );\n\n    const updateUserDataAction = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        console.log('activated');\n        try {\n            const form: HTMLFormElement = e.currentTarget;\n            if (\n                form !== null &&\n                form.firstname !== null &&\n                form.email !== null &&\n                form.lastname !== null\n            ) {\n                if (form.firstname.value.toString() === '')\n                    form.firstname.value = userData.name;\n\n                if (form.lastname.value.toString() === '')\n                    form.lastname.value = userData.lastName;\n\n                if (form.email.value.toString() === '')\n                    form.email.value = userData.email;\n\n                const updatedUser: {\n                    name: string;\n                    email: string;\n                    lastname: string;\n                } = {\n                    name: form.firstname.value.toString(),\n                    email: form.email.value.toString(),\n                    lastname: form.lastname.value.toString(),\n                };\n\n                updateUserData(updatedUser)\n                    .then(res => {\n                        if (res.status === 200) {\n                            const userData: IUserData = {\n                                id: res.data.result._id,\n                                email: res.data.result.email,\n                                name: res.data.result.name,\n                                lastName: res.data.result.lastName,\n                                friends: res.data.result.friends,\n                                isUserLoggedIn: true,\n                            };\n\n                            dispatch({\n                                type: 'SET_USER_DATA',\n                                payload: userData,\n                            });\n                            setIsDisabled(true);\n                            setDisplay(true);\n                            setIsUpdateBtn(false);\n                        } else if (res.status === 201) {\n                            console.log(res.data.message);\n                            alert(\n                                res.data.message + ' change to antoher email',\n                            );\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    });\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return (\n        <form onSubmit={e => updateUserDataAction(e)}>\n            <div\n                className='d-flex  card text-center'\n                style={{ fontSize: '2vh' }}>\n                <div className='card-header'>\n                    <h1>{props.headerValue}</h1>\n                </div>\n                <div className='d-flex justify-content-center card-body'>\n                    <img\n                        src={props.img}\n                        alt='profile'\n                        style={{ height: '30vh' }}\n                    />\n                    <div className='d-flex justify-content-between flex-column flex-column w-50 h-full pt-2'>\n                        <DataField\n                            value={props.firstname}\n                            label={'Firstname'}\n                            isDisabled={isDisabled}\n                            name={'firstname'}\n                        />\n                        <DataField\n                            value={props.lastname}\n                            label={'Lastname'}\n                            isDisabled={isDisabled}\n                            name={'lastname'}\n                        />\n                        <DataField\n                            value={props.email}\n                            label={'Email'}\n                            isDisabled={isDisabled}\n                            name={'email'}\n                        />\n                    </div>\n\n                    {/* this friend list will be generated in another component after validation updated */}\n                    {/* <div\n                        className='overflow-auto w-25'\n                        style={{ height: '30vh' }}>\n                        <UserFriendListDisplay />\n                    </div> */}\n                </div>\n                <div className='card-footer text-muted'>\n                    <i className='ms-5'>{props.footerValue}</i>\n                    <div className='float-end'>\n                        {display ? (\n                            <button\n                                type='button'\n                                className='btn btn-outline-info me-2'\n                                onClick={() => {\n                                    setIsDisabled(false);\n                                    setDisplay(false);\n                                    setIsUpdateBtn(true);\n                                }}>\n                                edit\n                            </button>\n                        ) : (\n                            <button\n                                type='button'\n                                className='btn btn-outline-info me-2 d-none'\n                                onClick={() => {\n                                    setIsDisabled(false);\n                                    setDisplay(false);\n                                    setIsUpdateBtn(true);\n                                }}>\n                                edit\n                            </button>\n                        )}\n                        {isUpdateBtn ? (\n                            <button\n                                type='submit'\n                                className='btn btn-outline-primary'>\n                                update\n                            </button>\n                        ) : (\n                            <button\n                                className='btn btn-outline-primary'\n                                disabled>\n                                update\n                            </button>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </form>\n    );\n};\n","import React from 'react';\nimport { FullCard } from '../components/organisms/FullCard';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\nimport { IUserData } from '../types/types';\nimport profile from '../img/profilePicture.png';\n\nexport const Profile = () => {\n    const userData: IUserData = useSelector(\n        (state: RootState) => state.userData,\n    );\n\n    return (\n        <div\n            className='d-flex justify-content-center align-items-center w-100 h-75'\n            style={{\n                position: 'absolute',\n                left: '50%',\n                top: '50%',\n                transform: 'translate(-50%, -40%)',\n            }}>\n            <div className='w-75 h-75'>\n                <FullCard\n                    headerValue={'Profile Data'}\n                    footerValue={'klebaniukp chat template'}\n                    firstname={userData.name}\n                    lastname={userData.lastName}\n                    email={userData.email}\n                    img={profile}\n                    imgHeight='25'\n                />\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const DisabledSuccessBtt = (props: { value: string }) => {\n    return (\n        <button type='button' className='btn btn-success' disabled>\n            {props.value}\n        </button>\n    );\n};\n","import React from 'react';\n\nexport const DisabledInfoBtt = (props: { value: string }) => {\n    return (\n        <button type='button' className='btn btn-info' disabled>\n            {props.value}\n        </button>\n    );\n};\n","import React, { useState } from 'react';\nimport { sendFriendRequestAPI } from '../../api';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { UserDataDisplay } from '../atoms/Card/UserDataDisplay';\nimport { ButtonNoLink } from '../atoms/Button/ButtonNoLink';\nimport { DisabledSuccessBtt } from '../atoms/Button/DisabledSuccessBtt';\nimport { DisabledInfoBtt } from '../atoms/Button/DisabledInfoBtt';\nimport { ISearchedUser } from '../../types/types';\n\nexport const SearchFriendModel = (props: {\n    img: string;\n    width: string;\n    height: string;\n    firstname: string;\n    lastname: string;\n    email: string;\n    imgHeight: string;\n    isFriend: null | boolean;\n    id: string;\n    index: number;\n}) => {\n    const [isHover, setIsHover] = useState(false);\n    const dispatch = useDispatch();\n\n    const searchResults: ISearchedUser[] = useSelector(\n        (state: RootState) => state.searchResults,\n    );\n\n    const sendFriendRequest = () => {\n        sendFriendRequestAPI({ id: props.id })\n            .then(res => {\n                if (res.status === 200) {\n                    const modifiedSearchresults = searchResults.map(user => {\n                        if (user._id === props.id) {\n                            const friendRequestStatus = false;\n\n                            return {\n                                ...user,\n                                friendRequestStatus: friendRequestStatus,\n                            };\n                        }\n                        return {\n                            ...user,\n                        };\n                    });\n\n                    dispatch({\n                        type: 'SEARCH_USERS',\n                        payload: modifiedSearchresults,\n                    });\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    };\n\n    const decideWhichButtonToRender = () => {\n        if (props.isFriend === true) {\n            return <DisabledSuccessBtt value='friend' />;\n        } else if (props.isFriend === false) {\n            return <DisabledInfoBtt value='pending' />;\n        } else if (props.isFriend === null) {\n            return (\n                <div onClick={() => sendFriendRequest()}>\n                    <ButtonNoLink type='submit' value='add' />\n                </div>\n            );\n        }\n    };\n\n    return (\n        <div\n            className='d-flex justify-content-evenly border border-2 mb-1 mt-1'\n            style={{ width: `${props.width}vw` }}>\n            {isHover ? (\n                <div\n                    className='d-flex flex-row justify-content-evenly align-items-center'\n                    style={{\n                        width: `${props.width}vw`,\n                        height: `${props.height}vh`,\n                        backgroundColor: '#e6e6e6',\n                    }}\n                    onMouseEnter={() => {\n                        setIsHover(true);\n                    }}\n                    onMouseLeave={() => setIsHover(false)}>\n                    <img\n                        style={{ height: `${props.imgHeight}vh` }}\n                        className='rounded-circle'\n                        src={props.img}\n                        alt='profile picture'\n                    />\n                    <div className='d-flex flex-column justify-content-between w-50'>\n                        <UserDataDisplay\n                            firstname={props.firstname}\n                            lastname={props.lastname}\n                            email={props.email}\n                        />\n                    </div>\n                    {decideWhichButtonToRender()}\n                </div>\n            ) : (\n                <div\n                    className='d-flex flex-row justify-content-evenly align-items-center'\n                    style={{\n                        width: `${props.width}vw`,\n                        height: `${props.height}vh`,\n                    }}\n                    onMouseEnter={() => setIsHover(true)}\n                    onMouseLeave={() => setIsHover(false)}>\n                    <img\n                        style={{ height: `${props.imgHeight}vh` }}\n                        className='rounded-circle'\n                        src={props.img}\n                        alt='profile picture'\n                    />\n                    <div className='d-flex flex-column justify-content-between w-50'>\n                        <UserDataDisplay\n                            firstname={props.firstname}\n                            lastname={props.lastname}\n                            email={props.email}\n                        />\n                    </div>\n                    {decideWhichButtonToRender()}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\nimport { ISearchedUser, IUserData } from '../types/types';\nimport { SearchFriendModel } from '../components/molecules/SearchFriendModel';\nimport { IFriend } from '../types/types';\nimport profile from '../img/profilePicture.png';\n\nexport const SearchUser = () => {\n    const searchResults: ISearchedUser[] = useSelector(\n        (state: RootState) => state.searchResults,\n    );\n\n    const scrollToTop = () => {\n        window.scrollTo(0, 0);\n    };\n\n    const generatingSearchResults = () => {\n        const jsxToReturn: JSX.Element[] = [];\n        for (let i = 0; i < searchResults.length; i++) {\n            const jsxElement = (\n                <div key={searchResults[i]._id}>\n                    <div className='d-flex flex-row justify-content-center'>\n                        <SearchFriendModel\n                            img={profile}\n                            width={'50'}\n                            height={'10'}\n                            imgHeight={'6'}\n                            firstname={searchResults[i].name}\n                            lastname={searchResults[i].lastName}\n                            email={searchResults[i].email}\n                            isFriend={searchResults[i].friendRequestStatus}\n                            id={searchResults[i]._id}\n                            index={i}\n                        />\n                    </div>\n                </div>\n            );\n\n            jsxToReturn.push(jsxElement);\n        }\n\n        scrollToTop();\n        return jsxToReturn;\n    };\n\n    return (\n        <div\n            className='d-flex flex-wrap flex-column justify-content-center align-item-center m-auto'\n            style={{ width: '100vw' }}>\n            {generatingSearchResults()}\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const DangerButton = (props: { value: string }) => {\n    return (\n        <button type='button' className='btn btn-danger'>\n            {props.value}\n        </button>\n    );\n};\n\nexport const OutlineDangerButton = (props: { value: string }) => {\n    return (\n        <button type='button' className='btn btn-outline-danger'>\n            {props.value}\n        </button>\n    );\n};\n","import React from 'react';\n\nexport const RejectButton = () => {\n    return (\n        <button type='button' className='btn btn-outline-danger'>\n            <i>reject</i>\n        </button>\n    );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { UserDataDisplay } from '../atoms/Card/UserDataDisplay';\nimport { DisabledSuccessBtt } from '../atoms/Button/DisabledSuccessBtt';\nimport { DisabledInfoBtt } from '../atoms/Button/DisabledInfoBtt';\nimport { DangerButton } from '../atoms/Button/DangerButton';\nimport { AcceptButton } from '../atoms/Button/AcceptButton';\nimport { RejectButton } from '../atoms/Button/RejectButton';\nimport {\n    manageFriendRequestAPI,\n    generateFriendList,\n    removeFriendAPI,\n} from '../../api';\nimport { IFullFriendData } from '../../types/types';\n\nexport const FriendListModel = (props: {\n    firstname: string;\n    lastname: string;\n    email: string;\n    img: string;\n    imgHeight: string;\n    width: string;\n    height: string;\n    isUserSender: boolean;\n    friendRequestStatus: boolean;\n    id: string;\n}) => {\n    const [isHover, setIsHover] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const manageFriendRequest = (finalStatus: boolean) => {\n        manageFriendRequestAPI({\n            friendId: props.id,\n            finalStatus: finalStatus,\n        }).then(res => {\n            if (res.status === 200) {\n                generateFriendList()\n                    .then(response => {\n                        if (response.status === 200) {\n                            const friendList: IFullFriendData[] =\n                                response.data.friendList;\n\n                            if (friendList.length > 0) {\n                                dispatch({\n                                    type: 'SET_FULFILLED_FRIENDLIST',\n                                    payload: friendList,\n                                });\n                            } else {\n                                dispatch({\n                                    type: 'SET_FULFILLED_FRIENDLIST',\n                                    payload: [],\n                                });\n                            }\n                        }\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    });\n            }\n        });\n    };\n\n    const removeFriend = () => {\n        removeFriendAPI({\n            friendId: props.id,\n        }).then(res => {\n            if (res.status === 200) {\n                generateFriendList()\n                    .then(response => {\n                        if (response.status === 200) {\n                            const friendList: IFullFriendData[] =\n                                response.data.friendList;\n\n                            if (friendList.length > 0) {\n                                dispatch({\n                                    type: 'SET_FULFILLED_FRIENDLIST',\n                                    payload: friendList,\n                                });\n                            } else {\n                                dispatch({\n                                    type: 'SET_FULFILLED_FRIENDLIST',\n                                    payload: [],\n                                });\n                            }\n                        }\n                    })\n                    .catch(error => {\n                        console.log(error);\n                    });\n            }\n        });\n    };\n\n    const decideWhichButtonToRender = () => {\n        if (props.friendRequestStatus) {\n            return (\n                <>\n                    <div>\n                        <DisabledSuccessBtt value='friend' />\n                    </div>\n                    <div onClick={() => removeFriend()}>\n                        <DangerButton value='delete' />\n                    </div>\n                </>\n            );\n        }\n\n        if (props.isUserSender) {\n            return (\n                <>\n                    <div>\n                        <DisabledInfoBtt value='pending' />\n                    </div>\n                    <div onClick={() => manageFriendRequest(false)}>\n                        <DangerButton value={'cancel'} />\n                    </div>\n                </>\n            );\n        } else {\n            return (\n                <>\n                    <div onClick={() => manageFriendRequest(true)}>\n                        <AcceptButton type='button' value='accept' />\n                    </div>\n                    <div onClick={() => manageFriendRequest(false)}>\n                        <RejectButton />\n                    </div>\n                </>\n            );\n        }\n    };\n\n    return (\n        <div\n            className='d-flex justify-content-evenly border border-2 mb-1 mt-1'\n            style={{ width: `${props.width}vw` }}>\n            {isHover ? (\n                <div\n                    className='d-flex flex-row justify-content-evenly align-items-center'\n                    style={{\n                        width: `${props.width}vw`,\n                        height: `${props.height}vh`,\n                        backgroundColor: '#e6e6e6',\n                    }}\n                    onMouseEnter={() => {\n                        setIsHover(true);\n                    }}\n                    onMouseLeave={() => setIsHover(false)}>\n                    <img\n                        style={{ height: `${props.imgHeight}vh` }}\n                        className='rounded-circle'\n                        src={props.img}\n                        alt='profile picture'\n                    />\n                    <div className='d-flex flex-column justify-content-between w-50'>\n                        <UserDataDisplay\n                            firstname={props.firstname}\n                            lastname={props.lastname}\n                            email={props.email}\n                        />\n                    </div>\n                    {decideWhichButtonToRender()}\n                </div>\n            ) : (\n                <div\n                    className='d-flex flex-row justify-content-evenly align-items-center'\n                    style={{\n                        width: `${props.width}vw`,\n                        height: `${props.height}vh`,\n                    }}\n                    onMouseEnter={() => setIsHover(true)}\n                    onMouseLeave={() => setIsHover(false)}>\n                    <img\n                        style={{ height: `${props.imgHeight}vh` }}\n                        className='rounded-circle'\n                        src={props.img}\n                        alt='profile picture'\n                    />\n                    <div className='d-flex flex-column justify-content-between w-50'>\n                        <UserDataDisplay\n                            firstname={props.firstname}\n                            lastname={props.lastname}\n                            email={props.email}\n                        />\n                    </div>\n                    {decideWhichButtonToRender()}\n                </div>\n            )}\n        </div>\n    );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { FriendListModel } from '../molecules/FriendListModel';\nimport { IUserData, IFullFriendData } from '../../types/types';\nimport profile from '../../img/profilePicture.png';\n\nexport const FriendListManagement = () => {\n    const userData: IUserData = useSelector(\n        (state: RootState) => state.userData,\n    );\n\n    const friendList: IFullFriendData[] = useSelector(\n        (state: RootState) => state.friendList,\n    );\n\n    return (\n        <div\n            className={`d-flex flex-column justify-content \n            center card w-50 h-100 align-items-center overflow-auto m-auto`}>\n            {friendList.map(friend => {\n                console.log(friend);\n                return (\n                    <div key={friend.email}>\n                        <FriendListModel\n                            firstname={friend.name}\n                            lastname={friend.lastName}\n                            email={friend.email}\n                            img={profile}\n                            imgHeight={'6'}\n                            width={'50'}\n                            height={'10'}\n                            isUserSender={friend.senderId === userData.id}\n                            friendRequestStatus={friend.friendRequestStatus}\n                            id={friend._id}\n                        />\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFriendList } from '../services/setFriendList';\nimport { FriendListManagement } from '../components/organisms/FriendListManagement';\n\nexport const Friends = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        setFriendList().then(friendList => {\n            dispatch({\n                type: 'SET_FULFILLED_FRIENDLIST',\n                payload: friendList,\n            });\n        });\n    }, []);\n\n    return (\n        <>\n            <FriendListManagement />\n        </>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\nimport { IUserData } from '../types/types';\nimport { routes } from '../routes/index';\nimport { auth } from '../services/auth';\nimport { setFriendList } from '../services/setFriendList';\nimport { Navbar } from '../components/organisms/Navbar';\nimport { Main } from './Main';\nimport { Chat } from './Chat';\nimport { Auth } from './Auth';\nimport { Profile } from './Profile';\nimport { SearchUser } from './SearchUser';\nimport { Friends } from './Friends';\n\nexport const Root = () => {\n    const dispatch = useDispatch();\n\n    const userData: IUserData = useSelector(\n        (state: RootState) => state.userData,\n    );\n\n    useEffect(() => {\n        auth().then(userData => {\n            if (userData) {\n                dispatch({ type: 'SET_USER_DATA', payload: userData });\n            }\n        });\n        setFriendList().then(friendList => {\n            dispatch({\n                type: 'SET_FULFILLED_FRIENDLIST',\n                payload: friendList,\n            });\n        });\n    }, []);\n\n    return (\n        <BrowserRouter>\n            <div>\n                <Navbar />\n                <Switch>\n                    <Route exact path={routes.home} component={Main}>\n                        <Redirect to={routes.auth} />\n                    </Route>\n                    <Route exact path={routes.chat} component={Chat} />\n                    <Route exact path={routes.auth} component={Auth} />\n                    <Route exact path={routes.profile} component={Profile} />\n                    <Route\n                        exact\n                        path={routes.searchUser}\n                        component={SearchUser}\n                    />\n                    <Route exact path={routes.friends} component={Friends} />\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n};\n","import { combineReducers } from 'redux';\nimport { setUserDataReducer as userData } from './setUserDataReducer';\nimport { searchUsersReducer as searchResults } from './searchUsersReducer';\nimport { setFulfilledFriendListReducer as friendList } from './setFulfilledFriendListReducer';\nimport { isShowPasswordReducer as showPassword } from './isShowPasswordReducer';\nimport { setCurrentChatReducer as currentChat } from './setCurrentChatReducer';\nimport { setMessageListReducer as messageList } from './setMessageListReducer';\n\nexport const reducers = combineReducers({\n    searchResults,\n    userData,\n    friendList,\n    showPassword,\n    currentChat,\n    messageList,\n});\n","import { ISearchedUser } from '../../types/types';\n\nexport const searchUsersReducer = (\n    state: ISearchedUser[],\n    action: { type: string; payload: ISearchedUser[] },\n) => {\n    try {\n        switch (action.type) {\n            case 'SEARCH_USERS':\n                return action.payload;\n            case 'CLEAR_SEARCH_USERS':\n                return [\n                    {\n                        _id: 'x',\n                        email: 'example@gmail.com',\n                        name: 'Example',\n                        lastName: 'Friend',\n                        friendRequestStatus: null,\n                    },\n                ];\n            default:\n                if (state) {\n                    return state;\n                } else {\n                    return [\n                        {\n                            _id: 'x',\n                            email: 'example@gmail.com',\n                            name: 'Example',\n                            lastName: 'Friend',\n                            friendRequestStatus: null,\n                        },\n                    ];\n                }\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n","import { IUserData } from '../../types/types';\n\nexport const setUserDataReducer = (\n    state: IUserData,\n    action: { type: string; payload: IUserData },\n) => {\n    try {\n        switch (action.type) {\n            case 'SET_USER_DATA':\n                return action.payload;\n            case 'LOGOUT':\n                return {\n                    id: 'x',\n                    email: 'John@Doe.com',\n                    name: 'John',\n                    lastName: 'Doe',\n                    friends: [\n                        {\n                            id: '1039274',\n                            friendRequestStatus: false,\n                            senderId: '1039274',\n                        },\n                    ],\n                    isUserLoggedIn: false,\n                };\n            default:\n                if (state) {\n                    return state;\n                } else {\n                    return {\n                        id: 'x',\n                        email: 'John@Doe.com',\n                        name: 'John',\n                        lastName: 'Doe',\n                        friends: [\n                            {\n                                id: '1039274',\n                                friendRequestStatus: false,\n                                senderId: '1039274',\n                            },\n                        ],\n                        isUserLoggedIn: false,\n                    };\n                }\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n","import { IFullFriendData } from '../../types/types';\n\nexport const setFulfilledFriendListReducer = (\n    state: IFullFriendData[],\n    action: { type: string; payload: IFullFriendData[] },\n) => {\n    try {\n        switch (action.type) {\n            case 'SET_FULFILLED_FRIENDLIST':\n                return action.payload;\n            case 'CLEAR_FULFILLED_FRIENDLIST':\n                return [\n                    {\n                        email: 'John@Doe.com',\n                        name: 'John',\n                        lastName: 'Doe',\n                        friendRequestStatus: true,\n                        senderId: 'not-real-id',\n                    },\n                ];\n            default:\n                if (state) {\n                    return state;\n                } else {\n                    return [\n                        {\n                            email: 'John@Doe.com',\n                            name: 'John',\n                            lastName: 'Doe',\n                            friendRequestStatus: true,\n                            senderId: 'not-real-id',\n                        },\n                    ];\n                }\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n","export const isShowPasswordReducer = (\n    state: boolean,\n    action: { type: string; payload: boolean },\n) => {\n    try {\n        switch (action.type) {\n            case 'SET_IS_SHOW_PASSWORD':\n                return action.payload;\n            default:\n                return false;\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n","import { IChat } from '../../types/types';\n\nexport const setCurrentChatReducer = (\n    state: IChat,\n    action: { type: string; payload: IChat },\n) => {\n    try {\n        switch (action.type) {\n            case 'SET_CURRENT_CHAT':\n                return action.payload;\n            case 'CLEAR_CURRENT_CHAT':\n                return {\n                    _id: '',\n                    name: '',\n                    lastname: '',\n                    email: '',\n                };\n            default:\n                if (state) return state;\n                return {\n                    _id: '',\n                    name: '',\n                    lastname: '',\n                    email: '',\n                };\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n","import { IMessage } from '../../types/types';\n\nexport const setMessageListReducer = (\n    state: IMessage[],\n    action: { type: string; payload: IMessage[] },\n) => {\n    try {\n        switch (action.type) {\n            case 'SET_MESSAGE_LIST':\n                return action.payload;\n            case 'ADD_MESSAGE':\n                return [action.payload, ...state];\n            case 'CLEAR_MESSAGE_LIST':\n                return [\n                    {\n                        value: '',\n                        senderId: '',\n                        date: '',\n                    },\n                ];\n            default:\n                if (state) return state;\n                return [\n                    {\n                        value: '',\n                        senderId: '',\n                        date: '',\n                    },\n                ];\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { reducers } from './reducers/index';\n\nexport const store = configureStore({ reducer: reducers });\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Root } from './views/Root';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Root />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}